name: CI

on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  php-test: # validate composer files, check the PHP coding standards and run tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Validate composer.json and composer.lock
        run: php8.1 /usr/bin/composer validate --strict

      - name: Cache Composer Packages
        id: composer-cache
        uses: actions/cache@v2
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install Composer Dependencies
        if: steps.composer-cache.outputs.cache-hit != 'true'
        run: php8.1 /usr/bin/composer install --no-progress --no-suggest --prefer-dist --optimize-autoloader

      - name: Check PHP Coding Standards
        run: php8.1 ./vendor/bin/php-cs-fixer fix --dry-run

      - name: Prepare The Environment
        run: cp .env.example .env

      - name: Create Database
        run: |
          sudo systemctl start mysql
          mysql --user="root" --password="root" -e "CREATE DATABASE qrpoc character set UTF8mb4 collate utf8mb4_bin;"

      - name: Generate Application Key
        run: php8.1 artisan key:generate

      - name: Fake Mix Manifest
        run: |
          echo '{"/js/app.js":"/js/app.js","/css/app.css":"/css/app.css"}' > public/mix-manifest.json

      - name: Run PHP Tests
        run: php8.1 artisan test

  deploy:
    if: github.ref == 'refs/heads/main'
    needs: [php-test]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Cache Composer Packages
        id: composer-cache
        uses: actions/cache@v2
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install Composer Dependencies
        if: steps.composer-cache.outputs.cache-hit != 'true'
        run: php8.1 /usr/bin/composer install --no-progress --no-suggest --prefer-dist --optimize-autoloader

      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-yarn-modules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-modules-

      - name: Install Yarn Dependencies
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: yarn

      - name: Deploy
        env:
          DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
          SERVERS_YAML: ${{ secrets.SERVERS_YAML }}
          SSH_CONFIG: ${{ secrets.SSH_CONFIG }}
        run: |
          eval "$(ssh-agent -s)"
          ssh-add - <<< "${DEPLOY_KEY}"
          mkdir ~/.ssh
          echo "${SERVERS_YAML}" > servers.yaml
          echo "${SSH_CONFIG}" > ~/.ssh/config
          if [[ $GITHUB_REF == "refs/heads/main" ]]
          then
            php8.1 vendor/bin/dep deploy production --no-interaction
          else
            echo "No deployment configured for $GITHUB_REF"
            exit 1
          fi
